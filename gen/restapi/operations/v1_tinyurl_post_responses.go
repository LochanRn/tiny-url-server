// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/LochanRn/tiny-url-api/gen/models"
)

// V1TinyurlPostOKCode is the HTTP code returned for type V1TinyurlPostOK
const V1TinyurlPostOKCode int = 200

/*
V1TinyurlPostOK OK

swagger:response v1TinyurlPostOK
*/
type V1TinyurlPostOK struct {

	/*
	  In: Body
	*/
	Payload *models.V1TinyurlRedirectFoundBody `json:"body,omitempty"`
}

// NewV1TinyurlPostOK creates V1TinyurlPostOK with default headers values
func NewV1TinyurlPostOK() *V1TinyurlPostOK {

	return &V1TinyurlPostOK{}
}

// WithPayload adds the payload to the v1 tinyurl post o k response
func (o *V1TinyurlPostOK) WithPayload(payload *models.V1TinyurlRedirectFoundBody) *V1TinyurlPostOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v1 tinyurl post o k response
func (o *V1TinyurlPostOK) SetPayload(payload *models.V1TinyurlRedirectFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V1TinyurlPostOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V1TinyurlPostInternalServerErrorCode is the HTTP code returned for type V1TinyurlPostInternalServerError
const V1TinyurlPostInternalServerErrorCode int = 500

/*
V1TinyurlPostInternalServerError Internal Server Error

swagger:response v1TinyurlPostInternalServerError
*/
type V1TinyurlPostInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.V1InternalServerError `json:"body,omitempty"`
}

// NewV1TinyurlPostInternalServerError creates V1TinyurlPostInternalServerError with default headers values
func NewV1TinyurlPostInternalServerError() *V1TinyurlPostInternalServerError {

	return &V1TinyurlPostInternalServerError{}
}

// WithPayload adds the payload to the v1 tinyurl post internal server error response
func (o *V1TinyurlPostInternalServerError) WithPayload(payload *models.V1InternalServerError) *V1TinyurlPostInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v1 tinyurl post internal server error response
func (o *V1TinyurlPostInternalServerError) SetPayload(payload *models.V1InternalServerError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V1TinyurlPostInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
V1TinyurlPostDefault generic error response

swagger:response v1TinyurlPostDefault
*/
type V1TinyurlPostDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.V1TinyurlRedirectDefaultBody `json:"body,omitempty"`
}

// NewV1TinyurlPostDefault creates V1TinyurlPostDefault with default headers values
func NewV1TinyurlPostDefault(code int) *V1TinyurlPostDefault {
	if code <= 0 {
		code = 500
	}

	return &V1TinyurlPostDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the v1 tinyurl post default response
func (o *V1TinyurlPostDefault) WithStatusCode(code int) *V1TinyurlPostDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the v1 tinyurl post default response
func (o *V1TinyurlPostDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the v1 tinyurl post default response
func (o *V1TinyurlPostDefault) WithPayload(payload *models.V1TinyurlRedirectDefaultBody) *V1TinyurlPostDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v1 tinyurl post default response
func (o *V1TinyurlPostDefault) SetPayload(payload *models.V1TinyurlRedirectDefaultBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V1TinyurlPostDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
