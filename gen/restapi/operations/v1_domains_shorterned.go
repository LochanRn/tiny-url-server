// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// V1DomainsShorternedHandlerFunc turns a function with the right signature into a v1 domains shorterned handler
type V1DomainsShorternedHandlerFunc func(V1DomainsShorternedParams) middleware.Responder

// Handle executing the request and returning a response
func (fn V1DomainsShorternedHandlerFunc) Handle(params V1DomainsShorternedParams) middleware.Responder {
	return fn(params)
}

// V1DomainsShorternedHandler interface for that can handle valid v1 domains shorterned params
type V1DomainsShorternedHandler interface {
	Handle(V1DomainsShorternedParams) middleware.Responder
}

// NewV1DomainsShorterned creates a new http.Handler for the v1 domains shorterned operation
func NewV1DomainsShorterned(ctx *middleware.Context, handler V1DomainsShorternedHandler) *V1DomainsShorterned {
	return &V1DomainsShorterned{Context: ctx, Handler: handler}
}

/*
	V1DomainsShorterned swagger:route GET /v1/maxdomainsabbrev tinyurl v1DomainsShorterned

# Domains shortened the most

Domains shortened the most
*/
type V1DomainsShorterned struct {
	Context *middleware.Context
	Handler V1DomainsShorternedHandler
}

func (o *V1DomainsShorterned) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewV1DomainsShorternedParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
